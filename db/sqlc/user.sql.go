// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_name,
  first_name, 
  hashed_password,
  email
) VALUES (
  $1, $2, $3, $4
)
RETURNING user_name, first_name, hashed_password, email, "password_changed_At", created_at
`

type CreateUserParams struct {
	UserName       string `json:"user_name"`
	FirstName      string `json:"first_name"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserName,
		arg.FirstName,
		arg.HashedPassword,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.UserName,
		&i.FirstName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_name, first_name, hashed_password, email, "password_changed_At", created_at FROM users
WHERE user_name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userName)
	var i User
	err := row.Scan(
		&i.UserName,
		&i.FirstName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
